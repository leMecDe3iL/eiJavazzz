package labofx.gui;

import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;

import javax.inject.Inject;

import org.springframework.stereotype.Component;

import javafx.application.Platform;
import javafx.beans.binding.StringBinding;
import javafx.beans.property.Property;
import javafx.fxml.FXML;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.util.StringConverter;
import labofx.model.Calcul;
import labofx.model.ModelCalcul;

@Component @Scope("prototype")
public class ControllerCalcul {
	
	
	// Composants de la vue
	
	@FXML
	private TextField		fieldDonnee;
	@FXML
	private Label			labelDonnee;
	@FXML
	private Label			labelResultat;
	@FXML
	private Label			labelOperation;
	@FXML
	private Button			buttonSaisie;
	@FXML
	private Button			buttonOperation;

	
	// Autres champs
	
	private int idOp = 1;
	
	@Inject
	private ModelCalcul		modelCalcul;
	@Inject
	private ManagerGui		managerGui;
	
	
	// Initialisation
	
	@FXML
	private void initialize() {
		
		Calcul calcul = modelCalcul.getCalcul();
		
		// Data binding
		fieldDonnee.textProperty().bindBidirectional( calcul.donneeProperty(), new ConverterDouble() );
		labelDonnee.textProperty().bind( new BindingDouble( calcul.donneeProperty() ) );
		labelResultat.textProperty().bind( new BindingDouble( calcul.resultatProperty() ) );
		labelOperation.textProperty().bind( calcul.operationProperty() );
		
		// Config de l'affichage quand perte de focus du champ de saisie
		fieldDonnee.focusedProperty().addListener( obs -> {
			if ( ! fieldDonnee.isFocused() ) {
				labelDonnee.setVisible( true );
				fieldDonnee.setVisible( false );
				buttonOperation.setDefaultButton(false);
				buttonSaisie.setDefaultButton(true);
			}
		});
		
	}
	
	
	// Actions
	
	@FXML
	private void doSaisie() {
		labelDonnee.setVisible( false );
		fieldDonnee.setVisible( true );
		fieldDonnee.requestFocus();
		buttonSaisie.setDefaultButton(false);
		buttonOperation.setDefaultButton(true);
	}
	
	@FXML
	private void doOperaton() {
		fieldDonnee.setText( labelDonnee.getText() );
		switch (idOp) {
		case 1:
			modelCalcul.operation1();
			idOp = 2;
			break;
		case 2:
			modelCalcul.operation2();
			idOp = 1;
			break;
		}
		buttonOperation.setText( "Op. " + idOp );
	}	
	
	@FXML
	private void doNouvelleFenetre() throws IOException {

		Stage stage = new Stage();

		managerGui.showViewCalcul(stage);
		
		Window window = fieldDonnee.getScene().getWindow();
		stage.setX( window.getX() + 150 );
		stage.setY( window.getY() + 40 );
	}
	
	@FXML
	private void doQuitter() {
		Platform.exit();
	}
	
	
	// Classes auxiliaires
	
	public static class ConverterDouble extends StringConverter<Double> {

		private final NumberFormat	format = NumberFormat.getInstance();
		
		public ConverterDouble() {
			( (DecimalFormat) format ).applyPattern("#,##0.000");		
		}

		@Override
		public Double fromString( String source ) {
			try {
				source = source.replace( " ", "");
				return format.parse( source ).doubleValue();
			} catch ( Exception e ) {
				return null;
			}
		}

		@Override
		public String toString( Double source ) {
			if( source == null ) {
				return null;
			}
			return format.format( source );
		}
		
	}

	
	public class BindingDouble extends StringBinding {
		
		private final Property<Double>	prop;
		private final NumberFormat		format = NumberFormat.getInstance();

		public BindingDouble( Property<Double> prop ) {
			( (DecimalFormat) format ).applyPattern("#,##0.000");		
			this.prop = prop;
			bind( prop );
		}
		
		@Override
		public void dispose() {
			unbind( prop );
		}

		@Override
		protected String computeValue() {
			if ( prop.getValue() == null ) {
				return null;
			}
			return format.format( prop.getValue() );
		} 
		
	}

	
	// MÃ©thode anonyme
	{
		System.out.println( "new " + this.getClass().getName() );
	}
	
}
